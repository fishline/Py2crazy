Disassembling top-level module in ./opt-v3-tests/gen_primes.txt
  2       0 LOAD_CONST           [43m[30mdef[39m[49m gen_primes():
          3 MAKE_FUNCTION        [43m[30mdef[39m[49m gen_primes():
          6 STORE_NAME           [43m[30mdef[39m[49m gen_primes():

 12       9 SETUP_LOOP           [43m[30mfor[39m[49m p in gen_primes():
         12 LOAD_NAME            for p in [43m[30mgen_primes[39m[49m():
         15 CALL_FUNCTION        for p in [43m[30mgen_primes[39m[49m():
         18 GET_ITER             for p in [43m[30mgen_primes[39m[49m():
    >>   19 FOR_ITER             for p in [43m[30mgen_primes[39m[49m():
         22 STORE_NAME           for [43m[30mp[39m[49m in gen_primes():

 13      25 LOAD_NAME                print([43m[30mp[39m[49m)
         28 PRINT_ITEM               print([43m[30mp[39m[49m)
         29 PRINT_NEWLINE            print([43m[30mp[39m[49m)
         30 JUMP_ABSOLUTE            print([43m[30mp[39m[49m)
    >>   33 POP_BLOCK                print([43m[30mp[39m[49m)
    >>   34 LOAD_CONST               print([43m[30mp[39m[49m)
         37 RETURN_VALUE             print([43m[30mp[39m[49m)

Disassembling function gen_primes
  3       0 LOAD_CONST               n = [43m[30m2[39m[49m
          3 STORE_FAST               [43m[30mn[39m[49m = 2

  4       6 SETUP_LOOP               [43m[30mwhile[39m[49m True:
    >>    9 LOAD_GLOBAL              while [43m[30mTrue[39m[49m:
         12 POP_JUMP_IF_FALSE        while [43m[30mTrue[39m[49m:

  5      15 SETUP_LOOP                   [43m[30mfor[39m[49m x in range(2, n):
         18 LOAD_GLOBAL                  for x in [43m[30mrange[39m[49m(2, n):
         21 LOAD_CONST                   for x in range([43m[30m2[39m[49m, n):
         24 LOAD_FAST                    for x in range(2, [43m[30mn[39m[49m):
         27 CALL_FUNCTION                for x in [43m[30mrange(2, n)[39m[49m:
         30 GET_ITER                     for x in [43m[30mrange(2, n)[39m[49m:
    >>   31 FOR_ITER                     for x in [43m[30mrange(2, n)[39m[49m:
         34 STORE_FAST                   for [43m[30mx[39m[49m in range(2, n):

  6      37 LOAD_FAST                        if [43m[30mn[39m[49m % x == 0:
         40 LOAD_FAST                        if n % [43m[30mx[39m[49m == 0:
         43 BINARY_MODULO                    if [43m[30mn % x[39m[49m == 0:
         44 LOAD_CONST                       if n % x == [43m[30m0[39m[49m:
         47 COMPARE_OP                       if [43m[30mn % x == 0[39m[49m:
         50 POP_JUMP_IF_FALSE                if [43m[30mn % x == 0[39m[49m:

  7      53 BREAK_LOOP                           [43m[30mbreak[39m[49m
         54 JUMP_FORWARD                         [43m[30mbreak[39m[49m
    >>   57 JUMP_ABSOLUTE                        [43m[30mbreak[39m[49m
    >>   60 POP_BLOCK                            [43m[30mbreak[39m[49m

  9      61 LOAD_FAST                        yield [43m[30mn[39m[49m
         64 YIELD_VALUE                      [43m[30myield[39m[49m n
         65 POP_TOP                          [43m[30myield[39m[49m n

 10 >>   66 LOAD_FAST                    [43m[30mn[39m[49m += 1
         69 LOAD_CONST                   n += [43m[30m1[39m[49m
         72 INPLACE_ADD                  n += [43m[30m1[39m[49m
         73 STORE_FAST                   n += [43m[30m1[39m[49m
         76 JUMP_ABSOLUTE                n += [43m[30m1[39m[49m
    >>   79 POP_BLOCK                    n += [43m[30m1[39m[49m
    >>   80 LOAD_CONST                   n += [43m[30m1[39m[49m
         83 RETURN_VALUE                 n += [43m[30m1[39m[49m
