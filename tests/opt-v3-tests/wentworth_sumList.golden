Disassembling top-level module in ./opt-v3-tests/wentworth_sumList.txt
  4       0 LOAD_CONST           [43m[30mdef[39m[49m sumList(xs):
          3 MAKE_FUNCTION        [43m[30mdef[39m[49m sumList(xs):
          6 STORE_NAME           [43m[30mdef[39m[49m sumList(xs):

 21       9 LOAD_CONST           testData = [[43m[30m10[39m[49m, [20, 30, [40], 50], 60]
         12 LOAD_CONST           testData = [10, [[43m[30m20[39m[49m, 30, [40], 50], 60]
         15 LOAD_CONST           testData = [10, [20, [43m[30m30[39m[49m, [40], 50], 60]
         18 LOAD_CONST           testData = [10, [20, 30, [[43m[30m40[39m[49m], 50], 60]
         21 BUILD_LIST           testData = [10, [20, 30, [[43m[30m40[39m[49m], 50], 60]
         24 LOAD_CONST           testData = [10, [20, 30, [40], [43m[30m50[39m[49m], 60]
         27 BUILD_LIST           testData = [10, [20, 30, [40], [43m[30m50[39m[49m], 60]
         30 LOAD_CONST           testData = [10, [20, 30, [40], 50], [43m[30m60[39m[49m]
         33 BUILD_LIST           testData = [10, [20, 30, [40], 50], [43m[30m60[39m[49m]
         36 STORE_NAME           [43m[30mtestData[39m[49m = [10, [20, 30, [40], 50], 60]

 22      39 LOAD_CONST           print(([43m[30m"Calling sumList(%s)"[39m[49m % testData))
         42 LOAD_NAME            print(("Calling sumList(%s)" % [43m[30mtestData[39m[49m))
         45 BINARY_MODULO        print(([43m[30m"Calling sumList(%s)" % testData[39m[49m))
         46 PRINT_ITEM           print(([43m[30m"Calling sumList(%s)" % testData[39m[49m))
         47 PRINT_NEWLINE        print(([43m[30m"Calling sumList(%s)" % testData[39m[49m))

 23      48 LOAD_NAME            result = [43m[30msumList[39m[49m(testData)
         51 LOAD_NAME            result = sumList([43m[30mtestData[39m[49m)
         54 CALL_FUNCTION        result = sumList([43m[30mtestData[39m[49m)
         57 STORE_NAME           [43m[30mresult[39m[49m = sumList(testData)

 24      60 LOAD_CONST           print(([43m[30m"Final sum of all numbers in initial list is %s"[39m[49m % result))
         63 LOAD_NAME            print(("Final sum of all numbers in initial list is %s" % [43m[30mresult[39m[49m))
         66 BINARY_MODULO        print(([43m[30m"Final sum of all numbers in initial list is %s" % result[39m[49m))
         67 PRINT_ITEM           print(([43m[30m"Final sum of all numbers in initial list is %s" % result[39m[49m))
         68 PRINT_NEWLINE        print(([43m[30m"Final sum of all numbers in initial list is %s" % result[39m[49m))
         69 LOAD_CONST           print(([43m[30m"Final sum of all numbers in initial list is %s" % result[39m[49m))
         72 RETURN_VALUE         print(([43m[30m"Final sum of all numbers in initial list is %s" % result[39m[49m))

Disassembling function sumList
  9       0 LOAD_CONST               sum = [43m[30m0[39m[49m
          3 STORE_FAST               [43m[30msum[39m[49m = 0

 10       6 SETUP_LOOP               [43m[30mfor[39m[49m e in xs:
          9 LOAD_FAST                for e in [43m[30mxs[39m[49m:
         12 GET_ITER                 for e in [43m[30mxs[39m[49m:
    >>   13 FOR_ITER                 for e in [43m[30mxs[39m[49m:
         16 STORE_FAST               for [43m[30me[39m[49m in xs:

 11      19 LOAD_GLOBAL                  if [43m[30mtype[39m[49m(e) is list:
         22 LOAD_FAST                    if type([43m[30me[39m[49m) is list:
         25 CALL_FUNCTION                if type([43m[30me[39m[49m) is list:
         28 LOAD_GLOBAL                  if type(e) is [43m[30mlist[39m[49m:
         31 COMPARE_OP                   if [43m[30mtype(e) is list[39m[49m:
         34 POP_JUMP_IF_FALSE            if [43m[30mtype(e) is list[39m[49m:

 12      37 LOAD_CONST                       print(([43m[30m"Calling sumList(%s) recursively"[39m[49m % e))
         40 LOAD_FAST                        print(("Calling sumList(%s) recursively" % [43m[30me[39m[49m))
         43 BINARY_MODULO                    print(([43m[30m"Calling sumList(%s) recursively" % e[39m[49m))
         44 PRINT_ITEM                       print(([43m[30m"Calling sumList(%s) recursively" % e[39m[49m))
         45 PRINT_NEWLINE                    print(([43m[30m"Calling sumList(%s) recursively" % e[39m[49m))

 13      46 LOAD_GLOBAL                      v = [43m[30msumList[39m[49m(e)
         49 LOAD_FAST                        v = sumList([43m[30me[39m[49m)
         52 CALL_FUNCTION                    v = sumList([43m[30me[39m[49m)
         55 STORE_FAST                       [43m[30mv[39m[49m = sumList(e)

 14      58 LOAD_CONST                       print(([43m[30m"sumList(%s) returned %s"[39m[49m % (e, v)))
         61 LOAD_FAST                        print(("sumList(%s) returned %s" % ([43m[30me[39m[49m, v)))
         64 LOAD_FAST                        print(("sumList(%s) returned %s" % (e, [43m[30mv[39m[49m)))
         67 BUILD_TUPLE                      print(("sumList(%s) returned %s" % (e, [43m[30mv[39m[49m)))
         70 BINARY_MODULO                    print(("sumList(%s) returned %s" [43m[30m%[39m[49m (e, v)))
         71 PRINT_ITEM                       print(("sumList(%s) returned %s" [43m[30m%[39m[49m (e, v)))
         72 PRINT_NEWLINE                    print(("sumList(%s) returned %s" [43m[30m%[39m[49m (e, v)))

 15      73 LOAD_FAST                        [43m[30msum[39m[49m += v
         76 LOAD_FAST                        sum += [43m[30mv[39m[49m
         79 INPLACE_ADD                      sum += [43m[30mv[39m[49m
         80 STORE_FAST                       sum += [43m[30mv[39m[49m
         83 JUMP_FORWARD                     sum += [43m[30mv[39m[49m

 17 >>   86 LOAD_FAST                        [43m[30msum[39m[49m += e
         89 LOAD_FAST                        sum += [43m[30me[39m[49m
         92 INPLACE_ADD                      sum += [43m[30me[39m[49m
         93 STORE_FAST                       sum += [43m[30me[39m[49m
    >>   96 JUMP_ABSOLUTE                    sum += [43m[30me[39m[49m
    >>   99 POP_BLOCK                        sum += [43m[30me[39m[49m

 18 >>  100 LOAD_FAST                return [43m[30msum[39m[49m
        103 RETURN_VALUE             return [43m[30msum[39m[49m
