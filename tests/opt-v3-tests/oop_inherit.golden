Disassembling top-level module in ./opt-v3-tests/oop_inherit.txt
  5       0 LOAD_CONST           [43m[30mclass[39m[49m Staff601:
          3 BUILD_TUPLE          [43m[30mclass[39m[49m Staff601:
          6 LOAD_CONST           [43m[30mclass[39m[49m Staff601:
          9 MAKE_FUNCTION        [43m[30mclass[39m[49m Staff601:
         12 CALL_FUNCTION        [43m[30mclass[39m[49m Staff601:
         15 BUILD_CLASS          [43m[30mclass[39m[49m Staff601:
         16 STORE_NAME           [43m[30mclass[39m[49m Staff601:

 13      19 LOAD_CONST           [43m[30mclass[39m[49m Prof601(Staff601):
         22 LOAD_NAME            class Prof601([43m[30mStaff601[39m[49m):
         25 BUILD_TUPLE          class Prof601([43m[30mStaff601[39m[49m):
         28 LOAD_CONST           class Prof601([43m[30mStaff601[39m[49m):
         31 MAKE_FUNCTION        class Prof601([43m[30mStaff601[39m[49m):
         34 CALL_FUNCTION        class Prof601([43m[30mStaff601[39m[49m):
         37 BUILD_CLASS          class Prof601([43m[30mStaff601[39m[49m):
         38 STORE_NAME           class Prof601([43m[30mStaff601[39m[49m):

 23      41 LOAD_NAME            pat = [43m[30mProf601[39m[49m('Pat', 60)
         44 LOAD_CONST           pat = Prof601([43m[30m'Pat'[39m[49m, 60)
         47 LOAD_CONST           pat = Prof601('Pat', [43m[30m60[39m[49m)
         50 CALL_FUNCTION        pat = Prof601('Pat', [43m[30m60[39m[49m)
         53 STORE_NAME           [43m[30mpat[39m[49m = Prof601('Pat', 60)
         56 LOAD_CONST           [43m[30mpat[39m[49m = Prof601('Pat', 60)
         59 RETURN_VALUE         [43m[30mpat[39m[49m = Prof601('Pat', 60)

Disassembling function Prof601
 13       0 LOAD_NAME            [43m[30mclass[39m[49m Prof601(Staff601):
          3 STORE_NAME           [43m[30mclass[39m[49m Prof601(Staff601):

 14       6 LOAD_CONST               salary = [43m[30m100000[39m[49m
          9 STORE_NAME               [43m[30msalary[39m[49m = 100000

 16      12 LOAD_CONST               [43m[30mdef[39m[49m __init__(self, name, age):
         15 MAKE_FUNCTION            [43m[30mdef[39m[49m __init__(self, name, age):
         18 STORE_NAME               [43m[30mdef[39m[49m __init__(self, name, age):

 20      21 LOAD_CONST               [43m[30mdef[39m[49m salutation(self):
         24 MAKE_FUNCTION            [43m[30mdef[39m[49m salutation(self):
         27 STORE_NAME               [43m[30mdef[39m[49m salutation(self):
         30 LOAD_LOCALS              [43m[30mdef[39m[49m salutation(self):
         31 RETURN_VALUE             [43m[30mdef[39m[49m salutation(self):

Disassembling function salutation
 21       0 LOAD_FAST                    return [43m[30mself[39m[49m.role + ' ' + self.name
          3 LOAD_ATTR                    return self[43m[30m.role[39m[49m + ' ' + self.name
          6 LOAD_CONST                   return self.role + [43m[30m' '[39m[49m + self.name
          9 BINARY_ADD                   return self[43m[30m.role + ' '[39m[49m + self.name
         10 LOAD_FAST                    return self.role + ' ' + [43m[30mself[39m[49m.name
         13 LOAD_ATTR                    return self.role + ' ' + self[43m[30m.name[39m[49m
         16 BINARY_ADD                   return self[43m[30m.role + ' ' + self.name[39m[49m
         17 RETURN_VALUE                 return self[43m[30m.role + ' ' + self.name[39m[49m

Disassembling function __init__
 17       0 LOAD_FAST                    self.name = [43m[30mname[39m[49m
          3 LOAD_FAST                    [43m[30mself[39m[49m.name = name
          6 STORE_ATTR                   self[43m[30m.name[39m[49m = name

 18       9 LOAD_FAST                    [43m[30mself[39m[49m.giveRaise((age - 18) * 0.03)
         12 LOAD_ATTR                    self[43m[30m.giveRaise[39m[49m((age - 18) * 0.03)
         15 LOAD_FAST                    self.giveRaise(([43m[30mage[39m[49m - 18) * 0.03)
         18 LOAD_CONST                   self.giveRaise((age - [43m[30m18[39m[49m) * 0.03)
         21 BINARY_SUBTRACT              self.giveRaise(([43m[30mage - 18[39m[49m) * 0.03)
         22 LOAD_CONST                   self.giveRaise((age - 18) * [43m[30m0.03[39m[49m)
         25 BINARY_MULTIPLY              self.giveRaise(([43m[30mage - 18) * 0.03[39m[49m)
         26 CALL_FUNCTION                self.giveRaise(([43m[30mage - 18) * 0.03[39m[49m)
         29 POP_TOP                      self.giveRaise(([43m[30mage - 18) * 0.03[39m[49m)
         30 LOAD_CONST                   self.giveRaise(([43m[30mage - 18) * 0.03[39m[49m)
         33 RETURN_VALUE                 self.giveRaise(([43m[30mage - 18) * 0.03[39m[49m)

Disassembling function Staff601
  5       0 LOAD_NAME            [43m[30mclass[39m[49m Staff601:
          3 STORE_NAME           [43m[30mclass[39m[49m Staff601:

  6       6 LOAD_CONST               course = [43m[30m'6.01'[39m[49m
          9 STORE_NAME               [43m[30mcourse[39m[49m = '6.01'

  7      12 LOAD_CONST               building = [43m[30m34[39m[49m
         15 STORE_NAME               [43m[30mbuilding[39m[49m = 34

  8      18 LOAD_CONST               room = [43m[30m501[39m[49m
         21 STORE_NAME               [43m[30mroom[39m[49m = 501

 10      24 LOAD_CONST               [43m[30mdef[39m[49m giveRaise(self, percentage):
         27 MAKE_FUNCTION            [43m[30mdef[39m[49m giveRaise(self, percentage):
         30 STORE_NAME               [43m[30mdef[39m[49m giveRaise(self, percentage):
         33 LOAD_LOCALS              [43m[30mdef[39m[49m giveRaise(self, percentage):
         34 RETURN_VALUE             [43m[30mdef[39m[49m giveRaise(self, percentage):

Disassembling function giveRaise
 11       0 LOAD_FAST                    self.salary = [43m[30mself[39m[49m.salary + self.salary * percentage
          3 LOAD_ATTR                    self.salary = self[43m[30m.salary[39m[49m + self.salary * percentage
          6 LOAD_FAST                    self.salary = self.salary + [43m[30mself[39m[49m.salary * percentage
          9 LOAD_ATTR                    self.salary = self.salary + self[43m[30m.salary[39m[49m * percentage
         12 LOAD_FAST                    self.salary = self.salary + self.salary * [43m[30mpercentage[39m[49m
         15 BINARY_MULTIPLY              self.salary = self.salary + self[43m[30m.salary * percentage[39m[49m
         16 BINARY_ADD                   self.salary = self[43m[30m.salary + self.salary * percentage[39m[49m
         17 LOAD_FAST                    [43m[30mself[39m[49m.salary = self.salary + self.salary * percentage
         20 STORE_ATTR                   self[43m[30m.salary[39m[49m = self.salary + self.salary * percentage
         23 LOAD_CONST                   self[43m[30m.salary[39m[49m = self.salary + self.salary * percentage
         26 RETURN_VALUE                 self[43m[30m.salary[39m[49m = self.salary + self.salary * percentage
