Disassembling top-level module in ./opt-v3-tests/sum-cubes.txt
  1       0 LOAD_CONST           [43m[30mdef[39m[49m summation(n, term, next):
          3 MAKE_FUNCTION        [43m[30mdef[39m[49m summation(n, term, next):
          6 STORE_NAME           [43m[30mdef[39m[49m summation(n, term, next):

  7       9 LOAD_CONST           [43m[30mdef[39m[49m cube(k):
         12 MAKE_FUNCTION        [43m[30mdef[39m[49m cube(k):
         15 STORE_NAME           [43m[30mdef[39m[49m cube(k):

 10      18 LOAD_CONST           [43m[30mdef[39m[49m successor(k):
         21 MAKE_FUNCTION        [43m[30mdef[39m[49m successor(k):
         24 STORE_NAME           [43m[30mdef[39m[49m successor(k):

 13      27 LOAD_CONST           [43m[30mdef[39m[49m sum_cubes(n):
         30 MAKE_FUNCTION        [43m[30mdef[39m[49m sum_cubes(n):
         33 STORE_NAME           [43m[30mdef[39m[49m sum_cubes(n):

 16      36 LOAD_NAME            [43m[30msum_cubes[39m[49m(3)
         39 LOAD_CONST           sum_cubes([43m[30m3[39m[49m)
         42 CALL_FUNCTION        sum_cubes([43m[30m3[39m[49m)
         45 POP_TOP              sum_cubes([43m[30m3[39m[49m)
         46 LOAD_CONST           sum_cubes([43m[30m3[39m[49m)
         49 RETURN_VALUE         sum_cubes([43m[30m3[39m[49m)

Disassembling function successor
 11       0 LOAD_FAST              return [43m[30mk[39m[49m + 1
          3 LOAD_CONST             return k + [43m[30m1[39m[49m
          6 BINARY_ADD             return [43m[30mk + 1[39m[49m
          7 RETURN_VALUE           return [43m[30mk + 1[39m[49m

Disassembling function sum_cubes
 14       0 LOAD_GLOBAL            return [43m[30msummation[39m[49m(n, cube, successor)
          3 LOAD_FAST              return summation([43m[30mn[39m[49m, cube, successor)
          6 LOAD_GLOBAL            return summation(n, [43m[30mcube[39m[49m, successor)
          9 LOAD_GLOBAL            return summation(n, cube, [43m[30msuccessor[39m[49m)
         12 CALL_FUNCTION          return summation(n, cube, [43m[30msuccessor[39m[49m)
         15 RETURN_VALUE           return summation(n, cube, [43m[30msuccessor[39m[49m)

Disassembling function cube
  8       0 LOAD_GLOBAL            return [43m[30mpow[39m[49m(k, 3)
          3 LOAD_FAST              return pow([43m[30mk[39m[49m, 3)
          6 LOAD_CONST             return pow(k, [43m[30m3[39m[49m)
          9 CALL_FUNCTION          return pow(k, [43m[30m3[39m[49m)
         12 RETURN_VALUE           return pow(k, [43m[30m3[39m[49m)

Disassembling function summation
  2       0 LOAD_CONST             total, k = [43m[30m0[39m[49m, 1
          3 LOAD_CONST             total, k = 0, [43m[30m1[39m[49m
          6 BUILD_TUPLE            total, k = 0, [43m[30m1[39m[49m
          9 UNPACK_SEQUENCE        [43m[30mtotal[39m[49m, k = 0, 1
         12 STORE_FAST             [43m[30mtotal[39m[49m, k = 0, 1
         15 STORE_FAST             total, [43m[30mk[39m[49m = 0, 1

  3      18 SETUP_LOOP             [43m[30mwhile[39m[49m k <= n:
    >>   21 LOAD_FAST              while [43m[30mk[39m[49m <= n:
         24 LOAD_FAST              while k <= [43m[30mn[39m[49m:
         27 COMPARE_OP             while [43m[30mk <= n[39m[49m:
         30 POP_JUMP_IF_FALSE      while [43m[30mk <= n[39m[49m:

  4      33 LOAD_FAST                total, k = [43m[30mtotal[39m[49m + term(k), next(k)
         36 LOAD_FAST                total, k = total + [43m[30mterm[39m[49m(k), next(k)
         39 LOAD_FAST                total, k = total + term([43m[30mk[39m[49m), next(k)
         42 CALL_FUNCTION            total, k = total + term([43m[30mk[39m[49m), next(k)
         45 BINARY_ADD               total, k = [43m[30mtotal + term[39m[49m(k), next(k)
         46 LOAD_FAST                total, k = total + term(k), [43m[30mnext[39m[49m(k)
         49 LOAD_FAST                total, k = total + term(k), next([43m[30mk[39m[49m)
         52 CALL_FUNCTION            total, k = total + term(k), next([43m[30mk[39m[49m)
         55 BUILD_TUPLE              total, k = total + term(k), next([43m[30mk[39m[49m)
         58 UNPACK_SEQUENCE          [43m[30mtotal[39m[49m, k = total + term(k), next(k)
         61 STORE_FAST               [43m[30mtotal[39m[49m, k = total + term(k), next(k)
         64 STORE_FAST               total, [43m[30mk[39m[49m = total + term(k), next(k)

  5      67 LOAD_FAST                return [43m[30mtotal[39m[49m
         70 RETURN_VALUE             return [43m[30mtotal[39m[49m
         71 JUMP_ABSOLUTE            return [43m[30mtotal[39m[49m
    >>   74 POP_BLOCK                return [43m[30mtotal[39m[49m
    >>   75 LOAD_CONST               return [43m[30mtotal[39m[49m
         78 RETURN_VALUE             return [43m[30mtotal[39m[49m
