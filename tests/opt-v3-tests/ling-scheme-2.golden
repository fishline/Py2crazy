Disassembling top-level module in ./opt-v3-tests/ling-scheme-2.txt
  1       0 LOAD_CONST           [43m[30mdef[39m[49m iota(n):
          3 MAKE_FUNCTION        [43m[30mdef[39m[49m iota(n):
          6 STORE_NAME           [43m[30mdef[39m[49m iota(n):

  9       9 LOAD_NAME            result = [43m[30miota[39m[49m(5)
         12 LOAD_CONST           result = iota([43m[30m5[39m[49m)
         15 CALL_FUNCTION        result = iota([43m[30m5[39m[49m)
         18 STORE_NAME           [43m[30mresult[39m[49m = iota(5)
         21 LOAD_CONST           [43m[30mresult[39m[49m = iota(5)
         24 RETURN_VALUE         [43m[30mresult[39m[49m = iota(5)

Disassembling function iota
  2       0 LOAD_CLOSURE           [43m[30mdef[39m[49m loop(acc, k):
          3 LOAD_CLOSURE           [43m[30mdef[39m[49m loop(acc, k):
          6 BUILD_TUPLE            [43m[30mdef[39m[49m loop(acc, k):
          9 LOAD_CONST             [43m[30mdef[39m[49m loop(acc, k):
         12 MAKE_CLOSURE           [43m[30mdef[39m[49m loop(acc, k):
         15 STORE_DEREF            [43m[30mdef[39m[49m loop(acc, k):

  7      18 LOAD_DEREF             return [43m[30mloop[39m[49m([], 0)
         21 BUILD_LIST             return loop([43m[30m[[39m[49m], 0)
         24 LOAD_CONST             return loop([], [43m[30m0[39m[49m)
         27 CALL_FUNCTION          return loop([], [43m[30m0[39m[49m)
         30 RETURN_VALUE           return loop([], [43m[30m0[39m[49m)

Disassembling function loop
  3       0 LOAD_FAST                if [43m[30mk[39m[49m == n:
          3 LOAD_DEREF               if k == [43m[30mn[39m[49m:
          6 COMPARE_OP               if [43m[30mk == n[39m[49m:
          9 POP_JUMP_IF_FALSE        if [43m[30mk == n[39m[49m:

  4      12 LOAD_GLOBAL                return [43m[30mlist[39m[49m(reversed(acc))
         15 LOAD_GLOBAL                return list([43m[30mreversed[39m[49m(acc))
         18 LOAD_FAST                  return list(reversed([43m[30macc[39m[49m))
         21 CALL_FUNCTION              return list(reversed([43m[30macc[39m[49m))
         24 CALL_FUNCTION              return list(reversed([43m[30macc[39m[49m))
         27 RETURN_VALUE               return list(reversed([43m[30macc[39m[49m))
         28 JUMP_FORWARD               return list(reversed([43m[30macc[39m[49m))

  6 >>   31 LOAD_DEREF                 return [43m[30mloop[39m[49m([k] + acc, k + 1)
         34 LOAD_FAST                  return loop([[43m[30mk[39m[49m] + acc, k + 1)
         37 BUILD_LIST                 return loop([[43m[30mk[39m[49m] + acc, k + 1)
         40 LOAD_FAST                  return loop([k] + [43m[30macc[39m[49m, k + 1)
         43 BINARY_ADD                 return loop([k] [43m[30m+[39m[49m acc, k + 1)
         44 LOAD_FAST                  return loop([k] + acc, [43m[30mk[39m[49m + 1)
         47 LOAD_CONST                 return loop([k] + acc, k + [43m[30m1[39m[49m)
         50 BINARY_ADD                 return loop([k] + acc, [43m[30mk + 1[39m[49m)
         51 CALL_FUNCTION              return loop([k] + acc, [43m[30mk + 1[39m[49m)
         54 RETURN_VALUE               return loop([k] + acc, [43m[30mk + 1[39m[49m)
    >>   55 LOAD_CONST                 return loop([k] + acc, [43m[30mk + 1[39m[49m)
         58 RETURN_VALUE               return loop([k] + acc, [43m[30mk + 1[39m[49m)
